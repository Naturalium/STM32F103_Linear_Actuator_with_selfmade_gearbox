/////////////////TIM2_CH3 PA2

/////////////////TIM4_CH2 PB7

#include <stm32f10x_rcc.h>
#include <misc.h>
#include <stdio.h>
#include <stm32f10x_exti.h>
#include <stm32f10x_gpio.h>
#include <stm32f10x_tim.h>
/*
float Kp   =   0.5;
float Ki   =   0.1;
float Kd   =   0.1;
#define dt      1

double AIM;
double current_val;    // 현재값
double err, prev_err;  // 오차. 이전 오차
double I_err, D_err;    // 오차적분. 오차미분
double Kp_term, Ki_term, Kd_term;   // p항, i항, d항
double control;
*/

int count , scount = 0;
int clbit = 0;
int time;
int time0, time1, time2, time3 = 0;
u16 CCR1_Val, CCR1_Temp = 999;
int key[2];

void TIM4_IRQHandler(void)
{
  if(TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET) {
      time++;
       TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    }
  
}

void EXTI0_IRQHandler(void)
{
   if(EXTI_GetITStatus(EXTI_Line0) != RESET) {
     if(clbit != 0)
        {
          count++;
          clbit = 0;
        }
        EXTI_ClearITPendingBit(EXTI_Line0);
        
    }
 
}
void EXTI1_IRQHandler(void)
{
  if(EXTI_GetITStatus(EXTI_Line1) != RESET) {
   clbit++;
   EXTI_ClearITPendingBit(EXTI_Line1);
  }
}


void RCC_Configuration(void)
{ 
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);

}

void NVIC_Configuration()
{
  NVIC_InitTypeDef NVIC_InitStructure;
  NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 15;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 16;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel = EXTI1_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 15;
  NVIC_Init(&NVIC_InitStructure);
  
  NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 12;
  NVIC_Init(&NVIC_InitStructure);
}

void USART_Configuration()
{
  USART_InitTypeDef USART_InitStructure;
  USART_InitStructure.USART_BaudRate = 115200;
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
  USART_InitStructure.USART_Parity = USART_Parity_No;
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
  USART_Init(USART1, &USART_InitStructure);
  USART_Cmd(USART1, ENABLE);
}

void TIM_Configuration()
{
  TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
  TIM_TimeBaseInitStructure.TIM_Prescaler = 7200;
  TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStructure.TIM_Period = 10-1;
  TIM_TimeBaseInitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStructure);
 

  TIM_TimeBaseInitStructure.TIM_Prescaler = 3000;
  TIM_TimeBaseInitStructure.TIM_Period = 999;
  TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
  
  TIM_OCInitTypeDef TIM_OCInitStructure;
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
  TIM_ARRPreloadConfig(TIM2, ENABLE);
  TIM_ARRPreloadConfig(TIM4, ENABLE);
 
  TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
}

void TIM_PWM()
{
  TIM_Cmd(TIM2, DISABLE);
  TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
  TIM_TimeBaseInitStructure.TIM_Prescaler = 3000;//3670;
  TIM_TimeBaseInitStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInitStructure.TIM_Period = 999;
  TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseInitStructure);
  
  TIM_OCInitTypeDef TIM_OCInitStructure;
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
  TIM_OCInitStructure.TIM_Pulse = CCR1_Val;
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
  TIM_ARRPreloadConfig(TIM2, ENABLE);
  TIM_Cmd(TIM2, ENABLE);
}

void EXTI_Configuration()
{
  EXTI_InitTypeDef EXTI_InitStructure;
  EXTI_InitStructure.EXTI_Line = EXTI_Line0;
  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;  
  EXTI_InitStructure.EXTI_LineCmd = ENABLE;
  EXTI_Init(&EXTI_InitStructure);
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
  
  EXTI_InitStructure.EXTI_Line = EXTI_Line1;
  EXTI_Init(&EXTI_InitStructure);
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1);

}

void GPIO_Configuration()
{
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOB, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
}

void SerialPutChar(uint8_t c)
{
  while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
  USART_SendData(USART1, c);
}
void Serial_PutString(uint8_t *s)
{
  while(*s != '\0')
  {
    SerialPutChar(*s);
    s++;
  }
}



void main(void) 
{
  
  int i = 7;
  float s_temp[9];
  unsigned short temp2, temp3;
  long temp;
  RCC_Configuration();
  USART_Configuration();
  NVIC_Configuration();
  GPIO_Configuration();
  EXTI_Configuration();
  TIM_Configuration();
  EXTI_GenerateSWInterrupt(EXTI_Line0);
  EXTI_GenerateSWInterrupt(EXTI_Line1);
  //TIM_Cmd(TIM2, ENABLE);
  TIM_Cmd(TIM4, ENABLE);
  
  Serial_PutString("\r\nWhich mode do you want? ");
  Serial_PutString("\r\n1. V - T - S third position control Mode ");
  Serial_PutString("\r\n2. Developer Mode ");
  while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
  while(USART_ReceiveData(USART1)-48 > 2)
   {
     Serial_PutString("\r\nWhich mode do you want? ");
     Serial_PutString("\r\n1. V - T - S third position control Mode ");
     Serial_PutString("\r\n2. Developer Mode ");
     while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
   }
  temp = USART_ReceiveData(USART1) - 48;
  /////////////////////////////////////////////////////////////////////////정밀제어모드
  
  if(temp == 1)
  {
/////////////////////////////////////////시작
    
      Serial_PutString("\r\nWhere is home point?(Gear Tooth distance from left side)  ex:00 ~ 22");
      while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      while(USART_ReceiveData(USART1)-48 > 9)
      {
       Serial_PutString("\r\nWhere is home point?(Gear Tooth distance from left side)");
       while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      }
      temp2 = USART_ReceiveData(USART1) - 48;
      while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      while(USART_ReceiveData(USART1)-48 > 9)
      {
       while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      }

      temp3 = USART_ReceiveData(USART1) - 48;
      CCR1_Val = 999;
      temp = temp2 * 10 + temp3;
      TIM_PWM();
      while(count < temp * 11.55)
       {
        GPIO_ResetBits(GPIOB, GPIO_Pin_6);
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
       }
      GPIO_ResetBits(GPIOB, GPIO_Pin_6 | GPIO_Pin_5);
     
      time = 0;
      while(time < 1000)
      {
        GPIO_ResetBits(GPIOB, GPIO_Pin_5 | GPIO_Pin_6);
      }
      
      
      Serial_PutString("\r\nSampling Start");
      
      count = 0;
      int a = 0;
      scount = 0;
      
      CCR1_Val = 199;
      TIM_PWM();
      while(time < 500)
      {
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
        GPIO_SetBits(GPIOB, GPIO_Pin_6);
      }
      
      /*
      for(int k = 20; k <= 100; k+=10)
      {
        CCR1_Val = k*10 - 1;
        TIM_PWM();
        time=0;
        while(time < 500)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_5);
          GPIO_SetBits(GPIOB, GPIO_Pin_6);
        }
        time = 0;
        while(time < 400)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_6 | GPIO_Pin_5);
        }
        scount = scount + count;
        s_temp[a] = count;
        count = 0;
        a++;
      }
      */
      
      for(int k = 20; k <= 100; k+=10)
      {
        time=0;
        CCR1_Val = k*10 - 1;
        TIM_PWM();
        
        while(count < 254)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_5);
          GPIO_SetBits(GPIOB, GPIO_Pin_6);
        }
        //time = 0;
        count = 0;
        time = 0;
        SerialPutchar(time);
        while(time < 500)
        {
        }
        
        
        while(count < 254)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_6);
          GPIO_SetBits(GPIOB, GPIO_Pin_5);
        }
   
        count = 0;
        
      }
      
      /*
      ///////a = 0~8
      GPIO_ResetBits(GPIOB, GPIO_Pin_6 | GPIO_Pin_5);
      
      while(count < scount)
       {
        GPIO_ResetBits(GPIOB, GPIO_Pin_6);
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
       }
      GPIO_ResetBits(GPIOB, GPIO_Pin_6 | GPIO_Pin_5);
      
      ///////////////////////calculate 8.5mm
      float b;
     // b = 8.5 * 3.141592;
      
      for(a = 0; a <= 8; a++)
      {
        s_temp[a] = s_temp[a] / 0.5;   //   count/s 환산
      }
      
     // float b;
      ///////////////////////
      while(1)
      {
      
      Serial_PutString("\r\ntype the time u want (press Spacebar to go next)");
      Serial_PutString("\r\nex: 4 ~~~ 20 (sec)\n");
      while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      int l = 0;
      while(USART_ReceiveData(USART1) != 32)              //spacebar
      {
        SerialPutChar(USART_ReceiveData(USART1));
        key[l] = USART_ReceiveData(USART1);
        l++;
        while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
      }
      
      int i = 0;
      //////////////////
      if(key[1] != 0)
      {
        i = (key[0] - 48) * 10 + key[1] - 48;
      }
      else
        i = (key[0] - 48);
        
      /////////////////
      b = 254.65 / (float)i;

        /////////////////
      
        if(b < s_temp[0])
        {
          CCR1_Val = 200-1;
        }
        else if(b < s_temp[1])
        {
          CCR1_Val = (b / s_temp[1] * 300.0 - 1);
        }
        else if(b < s_temp[2])
        {
          CCR1_Val = (b / s_temp[2] * 400.0 - 1);
        }
        else if(b < s_temp[3])
        {
          CCR1_Val = (b / s_temp[3] * 500.0 - 1);
        }
        else if(b < s_temp[4])
        {
          CCR1_Val = (b / s_temp[4] * 600.0 - 1);
        }
        else if(b < s_temp[5])
        {
          CCR1_Val = (b / s_temp[5] * 700.0 - 1);
        }
        else if(b < s_temp[6])
        {
          CCR1_Val = (b / s_temp[6] * 800.0 - 1);
        }
        else if(b < s_temp[7])
        {
          CCR1_Val = (b / s_temp[7] * 900.0 - 1);
        }
        else if(b < s_temp[8])
        {
          CCR1_Val = (b / s_temp[8] * 999.0 - 1);
        }
        else if(b >= s_temp[8])
        {
          CCR1_Val = 999-1;
        }
        else
        {
          CCR1_Val = 200-1;
        }
      
        
        scount = 0;
        CCR1_Temp = CCR1_Val;
        CCR1_Val = 499;
        TIM_PWM();
        
        //////////////////
        count = 0;
        while(count < 15)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_5);
          GPIO_SetBits(GPIOB, GPIO_Pin_6);
        }
        
        
        count = 0;
        while(count < 15)
        {
          GPIO_ResetBits(GPIOB, GPIO_Pin_6);
          GPIO_SetBits(GPIOB, GPIO_Pin_5);
        }
        GPIO_ResetBits(GPIOB, GPIO_Pin_5);
        
        if(CCR1_Temp < 200)
        CCR1_Val = 199;
        TIM_PWM();
        CCR1_Val = CCR1_Temp;
        

        GPIO_SetBits(GPIOB, GPIO_Pin_6);
        count = 0;
        time = 0;
        
   ///////////////////////////////
      
        //AIM = b;
        
        //////////////////////////////////////////////////////
        while(scount < 254)
        {
          
          while(count < 3)
            {
                
            }
         
         
          scount = scount + count;
          count = 0;
          ///////////////////////////////////////
          
          //current_val = (float)scount / ((float)time * 0.001);
          
          
          
          
          //err = AIM - current_val;   // 오차 = 목표치-현재값
          //Kp_term = Kp * err;         // p항 = Kp*오차
 
          //I_err += err * dt;             // 오차적분 += 오차*dt
          //Ki_term = Ki * I_err;        // i항 = Ki*오차적분
 
          //D_err = (err-prev_err)/dt;  // 오차미분 = (현재오차-이전오차)/dt
          //Kd_term = Kd * D_err;      // d항 = Kd*오차미분
 
          //prev_err = err;   // 현재오차를 이전오차로
 
          //control = Kp_term + Ki_term + Kd_term;  // 제어량 = p항+i항+d항         
          
          //CCR1_Val = CCR1_Val + control;
          //if(CCR1_Val < 199)
          // CCR1_Val = 199;
          
          //(float)scount / ((float)time * 0.001) < b
          
          
          
          
          
          
          if((float)scount / ((float)time * 0.001) < b)                     //속도낮음
          {
            CCR1_Val = CCR1_Val + 999 * 10 / CCR1_Val;   //4   * (1 - ((float)scount / 254));
            if(CCR1_Val > 999)
              CCR1_Val = 999;
           
          }
          else if((float)scount / ((float)time * 0.001) > b)                //속도높음
          {
            CCR1_Val = CCR1_Val - 999 * 10 / CCR1_Val;    //4* (1 - ((float)scount / 254));
            if(CCR1_Val < 199)
              CCR1_Val = 199;
       
          }
          
          TIM_PWM();
          ///////////////////////////////////////
        }
        
        GPIO_ResetBits(GPIOB, GPIO_Pin_5 | GPIO_Pin_6);
        
        time0 = time/10000;
        time1 = (time - time0*10000)/1000;
        time2 = (time - time0*10000 - time1*1000)/100;
        time3 = (time - time0*10000 - time1*1000 - time2*100)/10;
        time = time - time0*10000 - time1*1000 - time2*100 - time3*10;
        Serial_PutString("\r\ntime(ms) = ");
        if(time0 != 0)
        {
          SerialPutChar(time0+48);
        }
        if(~(time0 != 0 | time1 !=0))
        {
          SerialPutChar(time1+48);
        }
        SerialPutChar(time2+48);
        SerialPutChar(time3+48);
        if(time >= 10)
        {
          time = 0;
        }
        SerialPutChar(time+48);
        time = 0;
        
      /*
      while(count <= temp)
            {
                GPIO_ResetBits(GPIOB, GPIO_Pin_5);
                GPIO_SetBits(GPIOB, GPIO_Pin_6);
            }
      */
      
        
        CCR1_Val = 999;
        TIM_PWM();
      while(count < scount)
       {
        GPIO_ResetBits(GPIOB, GPIO_Pin_6);
        GPIO_SetBits(GPIOB, GPIO_Pin_5);
       }
      GPIO_ResetBits(GPIOB, GPIO_Pin_6 | GPIO_Pin_5);
      key[0] = 0;
      key[1] = 0;
      
      
      
    }
  }
  /////////////////////////////////////////////////////////////////////////개발자모드
  else if(temp == 2)
  {
  
    while(1)
    {
      temp = 0;
      temp2 = 0;
      temp3 = 0;
      GPIO_ResetBits(GPIOB, GPIO_Pin_5);
      GPIO_ResetBits(GPIOB, GPIO_Pin_6);
      
      Serial_PutString("\r\nPWM(%)?");
      Serial_PutString("\r\n1.20%     2.40%      3.60%    4.80%    5.100%       ");
      while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
       while(USART_ReceiveData(USART1)-48 > 5)
       {
         Serial_PutString("\r\n1.20%     2.40%      3.60%    4.80%    5.100%       ");
         while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
       }
       CCR1_Val = (USART_ReceiveData(USART1)-48)*200 - 1;
       SerialPutChar(USART_ReceiveData(USART1));
       Serial_PutString("is selected ");
       TIM_PWM();
       Serial_PutString("\r\n      f : forward          b : backward (Clock Direction)");
       
       ////////////////////////////////////////////////////////////////////////
        while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
        while((USART_ReceiveData(USART1) != 'f') & (USART_ReceiveData(USART1) != 'b'))
          {
            Serial_PutString("\r\n      f : forward          b : backward");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
          }
        if(USART_ReceiveData(USART1) == 'f')
        {
          Serial_PutString("        forward is selected");
          USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          i = 0;
        }
        else if(USART_ReceiveData(USART1) == 'b')
        {
          Serial_PutString("        backward is selected ");
          USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          i = 1;
        }
        
          while((USART_ReceiveData(USART1) != 'f') & (USART_ReceiveData(USART1) != 'b'))
          {
            Serial_PutString("\r\n      f : forward          b : backward");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
          }
          Serial_PutString("\r\nEach gear tooth take 11 value for motor moving out");
          Serial_PutString("\r\nSize of number?? (0 : 10^0       1: 10^1      2: 10^2 )");
          while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
          while(USART_ReceiveData(USART1)-48 > 2)
          {
            Serial_PutString("\r\nSize of number?? (0 : 10^0       1: 10^1      2: 10^2 )");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
          }
          temp2 = (int)USART_ReceiveData(USART1) - 48;
          USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          
          if(temp2 == 1)
          {
            Serial_PutString("\r\nNumber of ten??  ");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
            temp2 = USART_ReceiveData(USART1) - 48;
            SerialPutChar((char)USART_ReceiveData(USART1));
            USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          }
          else if(temp2 == 2)
          {
            Serial_PutString("\r\nNumber of hundred??  ");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
            temp3 = USART_ReceiveData(USART1) - 48;
            SerialPutChar((char)USART_ReceiveData(USART1));
            USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
            Serial_PutString("\r\nNnumber of ten??  ");
            while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
            temp2 = USART_ReceiveData(USART1) - 48;
            SerialPutChar((char)USART_ReceiveData(USART1));
            USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          }
          Serial_PutString("\r\nNUM??  ");
          while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) != SET);
          temp = (100*temp3) + (10*temp2) + (USART_ReceiveData(USART1) - 48);
          SerialPutChar((char)USART_ReceiveData(USART1));
          USART_ClearITPendingBit(USART1, USART_ReceiveData(USART1));
          Serial_PutString("\r\nGot it!     ");
          time=0;
      while(1)
      {
        if(i == 0)                  //정회전
        {
          while(count <= temp)
          {
              GPIO_ResetBits(GPIOB, GPIO_Pin_5);
              GPIO_SetBits(GPIOB, GPIO_Pin_6);
          }
          count = 0;
          break;
        }
        else if(i == 1)             //역회전
        {
          while(count <= temp)
          {
              GPIO_ResetBits(GPIOB, GPIO_Pin_6);
              GPIO_SetBits(GPIOB, GPIO_Pin_5);
          }
          count = 0;
          break;
        }
        else
        {
          break;
        }
      }
      time0 = time/10000;
      time1 = (time - time0*10000)/1000;
      time2 = (time - time0*10000 - time1*1000)/100;
      time3 = (time - time0*10000 - time1*1000 - time2*100)/10;
      time = time - time0*10000 - time1*1000 - time2*100 - time3*10;
      
      if(time0 != 0)
      {
        SerialPutChar(time0+48);
      }
      if(~(time0 != 0 | time1 !=0))
      {
        SerialPutChar(time1+48);
      }
      SerialPutChar(time2+48);
      SerialPutChar(time3+48);
      SerialPutChar(time+48);
      Serial_PutString("ms was passed");
    }
  }
  
  
  
  
}

